<?xml version="1.0"?>
<launch>
  <arg name="namespace" default="/"/>
  <arg name="cmd_timeout" default="0.5"/>

  <include file="$(find ackermann_vehicle)/launch/ackermann_xacro.launch">
    <arg name="namespace" value="$(arg namespace)"/>
  </include>

   <group ns="$(arg namespace)">
    <!-- Create the world. -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch"></include>

    <!-- Spawn the vehicle. -->
    <!-- The arguments were used in simulation.  Since I publish an odom I'm commenting this out 
    <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param robot_description -model ackermann_vehicle
                -gazebo_namespace /$(arg namespace)/gazebo
                -x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>
    -->                

<node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
      args="-urdf -param robot_description -model ackermann_vehicle
            -gazebo_namespace /$(arg namespace)/gazebo"/>

    <!-- Load the joint controllers. One of these publishes the joint states
         to joint_states. -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner"
          args="$(find ackermann_vehicle)/config/cub_cadet_spawner_params.yaml"/>

    <!-- Control the steering, axle, and shock absorber joints. -->
    <node name="ackermann_controller" pkg="ackermann_vehicle" type="ackermann_controller.py">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>
      <rosparam file="$(find ackermann_vehicle)/config/cub_cadet_cntrlpy_params.yaml" command="load"/>
    </node>

  </group>

  <!-- Start rosserial nodes for left and right wheel encoders and IMU -->

  <node pkg="rosserial_python" type="serial_node.py" name="odom_left_serial_node" output="screen">
    <param name="port" value="/dev/odom_left"/>
    <param name="baud" value="57600"/>
  </node>
  <node pkg="rosserial_python" type="serial_node.py" name="odom_right_serial_node" output="screen">
    <param name="port" value="/dev/odom_right"/>
    <param name="baud" value="57600"/>
  </node>
  <arg name="port" default="/dev/rosimu" />
  <node pkg="chip_imu_driver" type="chip_imu_driver_node" name="chip_imu_driver_node" output="screen">
    <param name="port" value="$(arg port)" />
    <param name="initial_yaw" type="double" value="-90.94"/> <!-- initial yaw is 184 degrees (compass heading) -->    
  </node>

    <!-- ****** map server ***** -->
  <node name="map_server" pkg="map_server" type="map_server"
       args="$(find ackermann_vehicle)/maps/435_pine_valley.yaml" output="screen">
    <param name="frame_id" value="map"/>
  </node>

  <!-- If not running amcl, map odom on top of map -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom" />

  <!--  ************** Navigation ***************  -->

  <!-- ****** Move Base Flex ***** -->
  <node pkg="mbf_costmap_nav" type="mbf_costmap_nav" respawn="false" name="move_base_flex" output="screen">
    <param name="tf_timeout" value="1.5"/>
    <param name="planner_max_retries" value="3"/>
    <rosparam file="$(find ackermann_vehicle)/config/planners.yaml" command="load" />
    <rosparam file="$(find ackermann_vehicle)/config/controllers.yaml" command="load" />
    <rosparam file="$(find ackermann_vehicle)/config/recovery_behaviors.yaml" command="load" />
    <rosparam file="$(find ackermann_vehicle)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find ackermann_vehicle)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find ackermann_vehicle)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find ackermann_vehicle)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find ackermann_vehicle)/config/cub_cadet_teb_local_planner_params.yaml" command="load" />
  </node>

  <!-- Launch the nmea_serial_driver node.   LOCATED IN CATKIN_WS -->
  <node name="nmea_serial_driver_node" pkg="nmea_navsat_driver" type="nmea_serial_driver" output="screen">
    <param name="port" value="/dev/gps"/>
    <param name="baud" value="115200" />
    <param name="frame_id" value="gps" />
    <param name="use_GNSS_time" value="False" />
    <param name="time_ref_source" value="gps" />
    <param name="useRMC" value="False" />
  </node>

  <!-- Launch script to produce an odom statement - LOCATED IN CATKIN_WS  -->
    <!-- <node name="odom_wheel_node" pkg="ackermann_vehicle" type="ekf_odom_pub" output="screen" /> -->
    <node name="odom_wheel_node" pkg="ackermann_vehicle" type="odom_from_wheel_and_gps.py" output="screen" />
  <!-- <node pkg="beginner_tutorials" name="gps_odom" type="gps_odom.py" output="screen">  -->
  <!-- </node> -->

  <!-- ****** rvis ***** -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d /home/tractor/ros1_lawn_tractor_ws/src/ackermann_vehicle/cub_cadet_real_world.rviz"/>  

  <!-- Pure pursuit path tracking -->
  <node pkg="pure_pursuit" type="pure_pursuit" name="controller"  clear_params="true">
    <param name="robot_frame_id" value="base_link"/>
    <param name="global_frame_id" value="odom"/>
    <param name="lookahead_frame_id" value="lookahead"/>
    <!-- <rosparam file="$(find ackermann_vehicle)/config/cub_cadet_pure_pursuit.yaml" command="load"/> -->
    <rosparam file="$(find pure_pursuit)/cfg/pure_pursuit_cub_cadet.yaml" command="load"/>    
    <remap from="path_segment" to="/drive_path"/>
    <remap from="odometry" to="odom"/>
    <remap from="cmd_vel" to="cmd_vel"/>
    <!-- <remap from="cmd_acker" to="/ackermann_cmd"/> -->
    <remap from="cmd_acker" to="/acker_in"/>
  </node>  

 <!-- ****** set parameters for speed control ***** -->
 <param name="/speed_params" type="yaml" value="[230, 245, 256, 279, 287, 291, 294]" />  

<!-- <node name="serial_xfer" pkg="ackermann_vehicle" type="test_read_serial.py" output="screen" /> -->

</launch>